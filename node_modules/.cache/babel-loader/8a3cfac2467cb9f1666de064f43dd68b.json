{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\src\\\\panels\\\\Settings.js\";\nimport React from 'react';\nimport { View, Card, CardGrid, Panel, PanelHeader, Group, Cell, Switch, Button } from '@vkontakte/vkui';\nimport connect from '@vkontakte/vkui-connect'; // VK Connect\n\nimport { ConfigProvider } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css'; // Импортируем css\n\nvar Settings = /*#__PURE__*/function (_React$Component) {\n  _inherits(Settings, _React$Component);\n\n  function Settings(props) {\n    var _this;\n\n    _classCallCheck(this, Settings);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Settings).call(this, props));\n    _this.state = {\n      scheme: \"bright_light\" // Если не придет тема - ставим эту по умолчанию.\n\n    };\n    return _this;\n  }\n\n  _createClass(Settings, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      connect.subscribe(function (_ref) {\n        var _ref$detail = _ref.detail,\n            type = _ref$detail.type,\n            data = _ref$detail.data;\n\n        // Подписываемся на события.\n        if (type === 'VKWebAppUpdateConfig') {\n          // Получаем тему клиента.\n          _this2.setState({\n            scheme: data.scheme\n          });\n        }\n      }); //  Добавляем обработчик события изменения истории для работы аппаратных кнопок.\n    }\n  }, {\n    key: \"UpdateTheme\",\n    value: function UpdateTheme() {\n      if (this.state.scheme === \"bright_light\" || this.state.scheme === \"client_light\") {\n        // Если в стейте эти темы: \n        this.setState({\n          scheme: 'space_gray'\n        }); // меняем тему на альтернативную.\n\n        connect.send(\"VKWebAppSetViewSettings\", {\n          \"status_bar_style\": \"light\",\n          \"action_bar_color\": \"#000\"\n        }); // Устанавливаем цвет статус бара на белый и экшен бара на черный.\n      } else if (this.state.scheme === \"space_gray\" || this.state.scheme === \"client_dark\") {\n        this.setState({\n          scheme: 'bright_light'\n        }); // меняем тему на альтернативную.\n\n        connect.send(\"VKWebAppSetViewSettings\", {\n          \"status_bar_style\": \"dark\",\n          \"action_bar_color\": \"#fff\"\n        }); // Устанавливаем цвет статус бара на черный и экшен бара на белый.\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return (\n        /*#__PURE__*/\n        // scheme - это тема, которую мы ставим в приложением\n        React.createElement(ConfigProvider, {\n          scheme: this.state.scheme,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(View, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Cell, {\n          asideContent: /*#__PURE__*/React.createElement(Switch, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 33\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }\n        }, \"\\u0422\\u0435\\u043C\\u043D\\u0430\\u044F \\u0442\\u0435\\u043C\\u0430\"), /*#__PURE__*/React.createElement(Button, {\n          onClick: function onClick() {\n            return _this3.UpdateTheme();\n          },\n          size: \"xl\",\n          mode: \"secondary\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 9\n          }\n        }, \"\\u0421\\u043C\\u0435\\u043D\\u0438\\u0442\\u044C \\u0442\\u0435\\u043C\\u0443 \\u043D\\u0430 \\u0430\\u043B\\u044C\\u0442\\u0435\\u0440\\u043D\\u0430\\u0442\\u0438\\u0432\\u043D\\u0443\\u044E\")))\n      );\n    }\n  }]);\n\n  return Settings;\n}(React.Component);\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/Павел/Desktop/vkapp/nebuskins/src/panels/Settings.js"],"names":["React","View","Card","CardGrid","Panel","PanelHeader","Group","Cell","Switch","Button","connect","ConfigProvider","Settings","props","state","scheme","subscribe","detail","type","data","setState","send","UpdateTheme","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,WAAtC,EAAmDC,KAAnD,EAA0DC,IAA1D,EAAgEC,MAAhE,EAAwEC,MAAxE,QAAsF,iBAAtF;AACA,OAAOC,OAAP,MAAoB,yBAApB,C,CAA+C;;AAC/C,SAAQC,cAAR,QAA6B,iBAA7B;AACA,OAAO,+BAAP,C,CAAwC;;IAElCC,Q;;;AACF,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,kFAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,MAAM,EAAE,cADC,CACc;;AADd,KAAb;AAFe;AAKlB;;;;wCAEmB;AAAA;;AAChBL,MAAAA,OAAO,CAACM,SAAR,CAAkB,gBAA+B;AAAA,+BAA5BC,MAA4B;AAAA,YAAlBC,IAAkB,eAAlBA,IAAkB;AAAA,YAAZC,IAAY,eAAZA,IAAY;;AAAE;AACxD,YAAID,IAAI,KAAK,sBAAb,EAAqC;AAAE;AAC1B,UAAA,MAAI,CAACE,QAAL,CAAc;AAACL,YAAAA,MAAM,EAAEI,IAAI,CAACJ;AAAd,WAAd;AACH;AACJ,OAJD,EADgB,CAMhB;AACH;;;kCAEa;AACV,UAAG,KAAKD,KAAL,CAAWC,MAAX,KAAsB,cAAtB,IAAwC,KAAKD,KAAL,CAAWC,MAAX,KAAsB,cAAjE,EAAgF;AAAE;AAC9E,aAAKK,QAAL,CAAc;AAACL,UAAAA,MAAM,EAAE;AAAT,SAAd,EAD4E,CACrC;;AACvCL,QAAAA,OAAO,CAACW,IAAR,CAAa,yBAAb,EAAwC;AAAC,8BAAoB,OAArB;AAA8B,8BAAoB;AAAlD,SAAxC,EAF4E,CAEwB;AAC9G,OAHM,MAGA,IAAG,KAAKP,KAAL,CAAWC,MAAX,KAAsB,YAAtB,IAAsC,KAAKD,KAAL,CAAWC,MAAX,KAAsB,aAA/D,EAA8E;AAC1E,aAAKK,QAAL,CAAc;AAACL,UAAAA,MAAM,EAAE;AAAT,SAAd,EAD0E,CACjC;;AACzCL,QAAAA,OAAO,CAACW,IAAR,CAAa,yBAAb,EAAwC;AAAC,8BAAoB,MAArB;AAA6B,8BAAoB;AAAjD,SAAxC,EAF0E,CAEyB;AACtG;AACH;;;6BAEO;AAAA;;AACL;AAAA;AACI;AACA,4BAAC,cAAD;AAAgB,UAAA,MAAM,EAAE,KAAKP,KAAL,CAAWC,MAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACA,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACA,oBAAC,IAAD;AAAM,UAAA,YAAY,eAAE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2EADA,eAIJ,oBAAC,MAAD;AAAQ,UAAA,OAAO,EAAE;AAAA,mBAAM,MAAI,CAACO,WAAL,EAAN;AAAA,WAAjB;AAA2C,UAAA,IAAI,EAAC,IAAhD;AAAqD,UAAA,IAAI,EAAC,WAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mLAJI,CADA;AAFJ;AAWH;;;;EAvCkBtB,KAAK,CAACuB,S;;AA0C7B,eAAeX,QAAf","sourcesContent":["import React from 'react';\r\nimport { View, Card, CardGrid, Panel, PanelHeader, Group, Cell, Switch, Button } from '@vkontakte/vkui';\r\nimport connect from '@vkontakte/vkui-connect'; // VK Connect\r\nimport {ConfigProvider} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css'; // Импортируем css\r\n\r\nclass Settings extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            scheme: \"bright_light\" // Если не придет тема - ставим эту по умолчанию.\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        connect.subscribe(({ detail: { type, data }}) => { // Подписываемся на события.\r\n\t\t\tif (type === 'VKWebAppUpdateConfig') { // Получаем тему клиента.\r\n                this.setState({scheme: data.scheme})\r\n            }\r\n        })\r\n        //  Добавляем обработчик события изменения истории для работы аппаратных кнопок.\r\n    }\r\n\r\n    UpdateTheme() {\r\n        if(this.state.scheme === \"bright_light\" || this.state.scheme === \"client_light\"){ // Если в стейте эти темы: \r\n            this.setState({scheme: 'space_gray'}); // меняем тему на альтернативную.\r\n            connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\", \"action_bar_color\": \"#000\"}); // Устанавливаем цвет статус бара на белый и экшен бара на черный.\r\n\t} else if(this.state.scheme === \"space_gray\" || this.state.scheme === \"client_dark\") {\r\n            this.setState({scheme: 'bright_light'}); // меняем тему на альтернативную.\r\n            connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"dark\", \"action_bar_color\": \"#fff\"}); // Устанавливаем цвет статус бара на черный и экшен бара на белый.\r\n        }\r\n     }\r\n    \r\n    render() {\r\n        return(\r\n            // scheme - это тема, которую мы ставим в приложением\r\n            <ConfigProvider scheme={this.state.scheme}> \r\n            <View>\r\n            <Cell asideContent={<Switch />}>\r\n          Темная тема\r\n        </Cell>\r\n        <Button onClick={() => this.UpdateTheme()} size=\"xl\" mode=\"secondary\">Сменить тему на альтернативную</Button>\r\n            </View>\r\n            </ConfigProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Settings;"]},"metadata":{},"sourceType":"module"}