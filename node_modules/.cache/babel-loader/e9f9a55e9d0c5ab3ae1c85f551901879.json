{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\nimport firebase from \"firebase\";\nvar DOCUMENT_COLLECTION_NAME = \"image-file\";\nvar STORAGE_FILE_PATH = \"images/\";\n\nfunction UploadImage() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fileData = _useState4[0],\n      setFileData = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setIsLoading = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      isError = _useState8[0],\n      setIsError = _useState8[1];\n\n  var _useState9 = useState(null),\n      _useState10 = _slicedToArray(_useState9, 2),\n      progress = _useState10[0],\n      setProgress = _useState10[1];\n\n  var clearData = function clearData() {\n    setData(null);\n  };\n  /**\r\n   *\r\n   */\n\n\n  var generateFromImage = function generateFromImage(img) {\n    var MAX_WIDTH = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 300;\n    var MAX_HEIGHT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;\n    var quality = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    return new Promise(function (resolve, reject) {\n      var canvas = document.createElement(\"canvas\");\n      var image = new Image();\n\n      image.onerror = function (error) {\n        reject(error);\n      };\n\n      image.onload = function () {\n        var width = image.width;\n        var height = image.height;\n\n        if (width > height) {\n          if (width > MAX_WIDTH) {\n            height *= MAX_WIDTH / width;\n            width = MAX_WIDTH;\n          }\n        } else {\n          if (height > MAX_HEIGHT) {\n            width *= MAX_HEIGHT / height;\n            height = MAX_HEIGHT;\n          }\n        }\n\n        canvas.width = width;\n        canvas.height = height;\n        var ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0, width, height); // IMPORTANT: 'jpeg' NOT 'jpg'\n\n        var dataUrl = canvas.toDataURL(\"image/jpeg\", quality);\n        resolve(dataUrl);\n      };\n\n      image.src = img;\n    });\n  };\n\n  useEffect(function () {\n    var storageRef = firebase.storage().ref();\n\n    var uploadData = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var uniquePathName, ref, uploadTask;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // initialize upload information\n                setIsError(false);\n                setIsLoading(true);\n                setProgress({\n                  value: 0\n                }); // ensure unique file names\n\n                uniquePathName = new Date().getTime() + \"-\" + firebase.auth().currentUser.uid + \"-\" + fileData.fileName;\n\n                try {\n                  ref = storageRef.child(STORAGE_FILE_PATH + uniquePathName);\n                  uploadTask = ref.putString(fileData.dataUrl, \"data_url\", {\n                    contentType: \"image/\" + fileData.format\n                  }); // The first example.\n\n                  uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED, function (_progress) {\n                    var value = _progress.bytesTransferred / _progress.totalBytes;\n                    setProgress({\n                      value: value\n                    });\n                  }, function (_error) {\n                    setIsLoading(false);\n                    setIsError(_error);\n                  }, /*#__PURE__*/function () {\n                    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_complete) {\n                      var downloadUrl, storageData, docSaved, docData;\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              setIsError(false);\n                              setIsLoading(false);\n                              _context.next = 4;\n                              return uploadTask.snapshot.ref.getDownloadURL();\n\n                            case 4:\n                              downloadUrl = _context.sent;\n                              storageData = {\n                                //   metaData: uploadTask.snapshot.metadata,\n                                downloadUrl: downloadUrl,\n                                name: uploadTask.snapshot.metadata.name,\n                                image: {\n                                  ref: uploadTask.snapshot.ref.fullPath,\n                                  size: uploadTask.snapshot.metadata.size,\n                                  contentType: uploadTask.snapshot.metadata.contentType,\n                                  timeCreated: uploadTask.snapshot.metadata.timeCreated\n                                }\n                              }; // save to collection\n\n                              _context.next = 8;\n                              return onSave(storageData);\n\n                            case 8:\n                              docSaved = _context.sent;\n                              _context.next = 11;\n                              return docSaved.get();\n\n                            case 11:\n                              docData = _context.sent;\n                              setData(_objectSpread({}, docData.data(), {\n                                id: docData.id\n                              }));\n                              setProgress(null);\n\n                            case 14:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee);\n                    }));\n\n                    return function (_x) {\n                      return _ref2.apply(this, arguments);\n                    };\n                  }());\n                } catch (_error) {\n                  setIsLoading(false);\n                  setIsError(_error);\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function uploadData() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    fileData && uploadData();\n  }, [fileData]);\n  /**\r\n   *\r\n   * @param {*} _data\r\n   */\n\n  var onSave = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_data) {\n      var thumb, collectionRef;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return generateFromImage(fileData.dataUrl);\n\n            case 2:\n              thumb = _context3.sent;\n              collectionRef = firebase.firestore().collection(DOCUMENT_COLLECTION_NAME);\n              _context3.next = 6;\n              return collectionRef.add(_objectSpread({}, _data, {\n                thumb: thumb,\n                createdOn: firebase.firestore.FieldValue.serverTimestamp()\n              }));\n\n            case 6:\n              return _context3.abrupt(\"return\", _context3.sent);\n\n            case 7:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function onSave(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return [{\n    data: data,\n    isLoading: isLoading,\n    isError: isError,\n    progress: progress\n  }, setFileData, clearData];\n}\n\nexport default UploadImage;","map":{"version":3,"sources":["C:/Users/Павел/Desktop/vkapp/nebuskins/src/panels/UploadImage.js"],"names":["useState","useEffect","firebase","DOCUMENT_COLLECTION_NAME","STORAGE_FILE_PATH","UploadImage","data","setData","fileData","setFileData","isLoading","setIsLoading","isError","setIsError","progress","setProgress","clearData","generateFromImage","img","MAX_WIDTH","MAX_HEIGHT","quality","Promise","resolve","reject","canvas","document","createElement","image","Image","onerror","error","onload","width","height","ctx","getContext","drawImage","dataUrl","toDataURL","src","storageRef","storage","ref","uploadData","value","uniquePathName","Date","getTime","auth","currentUser","uid","fileName","child","uploadTask","putString","contentType","format","on","TaskEvent","STATE_CHANGED","_progress","bytesTransferred","totalBytes","_error","_complete","snapshot","getDownloadURL","downloadUrl","storageData","name","metadata","fullPath","size","timeCreated","onSave","docSaved","get","docData","id","_data","thumb","collectionRef","firestore","collection","add","createdOn","FieldValue","serverTimestamp"],"mappings":";;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,UAArB;AAEA,IAAMC,wBAAwB,GAAG,YAAjC;AACA,IAAMC,iBAAiB,GAAG,SAA1B;;AAEA,SAASC,WAAT,GAAuB;AAAA,kBACGL,QAAQ,EADX;AAAA;AAAA,MACdM,IADc;AAAA,MACRC,OADQ;;AAAA,mBAEWP,QAAQ,EAFnB;AAAA;AAAA,MAEdQ,QAFc;AAAA,MAEJC,WAFI;;AAAA,mBAGaT,QAAQ,CAAC,KAAD,CAHrB;AAAA;AAAA,MAGdU,SAHc;AAAA,MAGHC,YAHG;;AAAA,mBAISX,QAAQ,CAAC,KAAD,CAJjB;AAAA;AAAA,MAIdY,OAJc;AAAA,MAILC,UAJK;;AAAA,mBAKWb,QAAQ,CAAC,IAAD,CALnB;AAAA;AAAA,MAKdc,QALc;AAAA,MAKJC,WALI;;AAOrB,MAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACtBT,IAAAA,OAAO,CAAC,IAAD,CAAP;AACD,GAFD;AAIA;;;;;AAGA,MAAMU,iBAAiB,GAAG,SAApBA,iBAAoB,CACxBC,GADwB,EAKrB;AAAA,QAHHC,SAGG,uEAHS,GAGT;AAAA,QAFHC,UAEG,uEAFU,GAEV;AAAA,QADHC,OACG,uEADO,CACP;AACH,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACA,UAAIC,KAAK,GAAG,IAAIC,KAAJ,EAAZ;;AAEAD,MAAAA,KAAK,CAACE,OAAN,GAAgB,UAAAC,KAAK,EAAI;AACvBP,QAAAA,MAAM,CAACO,KAAD,CAAN;AACD,OAFD;;AAIAH,MAAAA,KAAK,CAACI,MAAN,GAAe,YAAM;AACnB,YAAIC,KAAK,GAAGL,KAAK,CAACK,KAAlB;AACA,YAAIC,MAAM,GAAGN,KAAK,CAACM,MAAnB;;AAEA,YAAID,KAAK,GAAGC,MAAZ,EAAoB;AAClB,cAAID,KAAK,GAAGd,SAAZ,EAAuB;AACrBe,YAAAA,MAAM,IAAIf,SAAS,GAAGc,KAAtB;AACAA,YAAAA,KAAK,GAAGd,SAAR;AACD;AACF,SALD,MAKO;AACL,cAAIe,MAAM,GAAGd,UAAb,EAAyB;AACvBa,YAAAA,KAAK,IAAIb,UAAU,GAAGc,MAAtB;AACAA,YAAAA,MAAM,GAAGd,UAAT;AACD;AACF;;AACDK,QAAAA,MAAM,CAACQ,KAAP,GAAeA,KAAf;AACAR,QAAAA,MAAM,CAACS,MAAP,GAAgBA,MAAhB;AACA,YAAIC,GAAG,GAAGV,MAAM,CAACW,UAAP,CAAkB,IAAlB,CAAV;AAEAD,QAAAA,GAAG,CAACE,SAAJ,CAAcT,KAAd,EAAqB,CAArB,EAAwB,CAAxB,EAA2BK,KAA3B,EAAkCC,MAAlC,EAnBmB,CAqBnB;;AACA,YAAII,OAAO,GAAGb,MAAM,CAACc,SAAP,CAAiB,YAAjB,EAA+BlB,OAA/B,CAAd;AAEAE,QAAAA,OAAO,CAACe,OAAD,CAAP;AACD,OAzBD;;AA0BAV,MAAAA,KAAK,CAACY,GAAN,GAAYtB,GAAZ;AACD,KAnCM,CAAP;AAoCD,GA1CD;;AA4CAjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMwC,UAAU,GAAGvC,QAAQ,CAACwC,OAAT,GAAmBC,GAAnB,EAAnB;;AACA,QAAMC,UAAU;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACjB;AACA/B,gBAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,gBAAAA,YAAY,CAAC,IAAD,CAAZ;AAEAI,gBAAAA,WAAW,CAAC;AAAE8B,kBAAAA,KAAK,EAAE;AAAT,iBAAD,CAAX,CALiB,CAMjB;;AACIC,gBAAAA,cAPa,GAQf,IAAIC,IAAJ,GAAWC,OAAX,KACA,GADA,GAEA9C,QAAQ,CAAC+C,IAAT,GAAgBC,WAAhB,CAA4BC,GAF5B,GAGA,GAHA,GAIA3C,QAAQ,CAAC4C,QAZM;;AAcjB,oBAAI;AACET,kBAAAA,GADF,GACQF,UAAU,CAACY,KAAX,CAAiBjD,iBAAiB,GAAG0C,cAArC,CADR;AAEEQ,kBAAAA,UAFF,GAEeX,GAAG,CAACY,SAAJ,CAAc/C,QAAQ,CAAC8B,OAAvB,EAAgC,UAAhC,EAA4C;AAC3DkB,oBAAAA,WAAW,EAAE,WAAWhD,QAAQ,CAACiD;AAD0B,mBAA5C,CAFf,EAOF;;AACAH,kBAAAA,UAAU,CAACI,EAAX,CACExD,QAAQ,CAACwC,OAAT,CAAiBiB,SAAjB,CAA2BC,aAD7B,EAEE,UAAAC,SAAS,EAAI;AACX,wBAAIhB,KAAK,GAAGgB,SAAS,CAACC,gBAAV,GAA6BD,SAAS,CAACE,UAAnD;AACAhD,oBAAAA,WAAW,CAAC;AAAE8B,sBAAAA,KAAK,EAALA;AAAF,qBAAD,CAAX;AACD,mBALH,EAME,UAAAmB,MAAM,EAAI;AACRrD,oBAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,oBAAAA,UAAU,CAACmD,MAAD,CAAV;AACD,mBATH;AAAA,yFAUE,iBAAMC,SAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACEpD,8BAAAA,UAAU,CAAC,KAAD,CAAV;AACAF,8BAAAA,YAAY,CAAC,KAAD,CAAZ;AAFF;AAAA,qCAI0B2C,UAAU,CAACY,QAAX,CAAoBvB,GAApB,CAAwBwB,cAAxB,EAJ1B;;AAAA;AAIMC,8BAAAA,WAJN;AAKMC,8BAAAA,WALN,GAKoB;AAChB;AACAD,gCAAAA,WAAW,EAAXA,WAFgB;AAGhBE,gCAAAA,IAAI,EAAEhB,UAAU,CAACY,QAAX,CAAoBK,QAApB,CAA6BD,IAHnB;AAIhB1C,gCAAAA,KAAK,EAAE;AACLe,kCAAAA,GAAG,EAAEW,UAAU,CAACY,QAAX,CAAoBvB,GAApB,CAAwB6B,QADxB;AAELC,kCAAAA,IAAI,EAAEnB,UAAU,CAACY,QAAX,CAAoBK,QAApB,CAA6BE,IAF9B;AAGLjB,kCAAAA,WAAW,EAAEF,UAAU,CAACY,QAAX,CAAoBK,QAApB,CAA6Bf,WAHrC;AAILkB,kCAAAA,WAAW,EAAEpB,UAAU,CAACY,QAAX,CAAoBK,QAApB,CAA6BG;AAJrC;AAJS,+BALpB,EAiBE;;AAjBF;AAAA,qCAkBuBC,MAAM,CAACN,WAAD,CAlB7B;;AAAA;AAkBMO,8BAAAA,QAlBN;AAAA;AAAA,qCAqBsBA,QAAQ,CAACC,GAAT,EArBtB;;AAAA;AAqBMC,8BAAAA,OArBN;AAsBEvE,8BAAAA,OAAO,mBACFuE,OAAO,CAACxE,IAAR,EADE;AAELyE,gCAAAA,EAAE,EAAED,OAAO,CAACC;AAFP,iCAAP;AAKAhE,8BAAAA,WAAW,CAAC,IAAD,CAAX;;AA3BF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAVF;;AAAA;AAAA;AAAA;AAAA;AAwCD,iBAhDD,CAgDE,OAAOiD,MAAP,EAAe;AACfrD,kBAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,kBAAAA,UAAU,CAACmD,MAAD,CAAV;AACD;;AAjEgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAVpB,UAAU;AAAA;AAAA;AAAA,OAAhB;;AAoEApC,IAAAA,QAAQ,IAAIoC,UAAU,EAAtB;AACD,GAvEQ,EAuEN,CAACpC,QAAD,CAvEM,CAAT;AAyEA;;;;;AAIA,MAAMmE,MAAM;AAAA,yEAAG,kBAAMK,KAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACK/D,iBAAiB,CAACT,QAAQ,CAAC8B,OAAV,CADtB;;AAAA;AACT2C,cAAAA,KADS;AAETC,cAAAA,aAFS,GAEOhF,QAAQ,CACzBiF,SADiB,GAEjBC,UAFiB,CAENjF,wBAFM,CAFP;AAAA;AAAA,qBAKA+E,aAAa,CAACG,GAAd,mBACRL,KADQ;AAEXC,gBAAAA,KAAK,EAALA,KAFW;AAGXK,gBAAAA,SAAS,EAAEpF,QAAQ,CAACiF,SAAT,CAAmBI,UAAnB,CAA8BC,eAA9B;AAHA,iBALA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAANb,MAAM;AAAA;AAAA;AAAA,KAAZ;;AAYA,SAAO,CAAC;AAAErE,IAAAA,IAAI,EAAJA,IAAF;AAAQI,IAAAA,SAAS,EAATA,SAAR;AAAmBE,IAAAA,OAAO,EAAPA,OAAnB;AAA4BE,IAAAA,QAAQ,EAARA;AAA5B,GAAD,EAAyCL,WAAzC,EAAsDO,SAAtD,CAAP;AACD;;AAED,eAAeX,WAAf","sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport firebase from \"firebase\";\r\n\r\nconst DOCUMENT_COLLECTION_NAME = \"image-file\";\r\nconst STORAGE_FILE_PATH = \"images/\";\r\n\r\nfunction UploadImage() {\r\n  const [data, setData] = useState();\r\n  const [fileData, setFileData] = useState();\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [isError, setIsError] = useState(false);\r\n  const [progress, setProgress] = useState(null);\r\n\r\n  const clearData = () => {\r\n    setData(null);\r\n  };\r\n\r\n  /**\r\n   *\r\n   */\r\n  const generateFromImage = (\r\n    img,\r\n    MAX_WIDTH = 300,\r\n    MAX_HEIGHT = 300,\r\n    quality = 1\r\n  ) => {\r\n    return new Promise((resolve, reject) => {\r\n      var canvas = document.createElement(\"canvas\");\r\n      var image = new Image();\r\n\r\n      image.onerror = error => {\r\n        reject(error);\r\n      };\r\n\r\n      image.onload = () => {\r\n        var width = image.width;\r\n        var height = image.height;\r\n\r\n        if (width > height) {\r\n          if (width > MAX_WIDTH) {\r\n            height *= MAX_WIDTH / width;\r\n            width = MAX_WIDTH;\r\n          }\r\n        } else {\r\n          if (height > MAX_HEIGHT) {\r\n            width *= MAX_HEIGHT / height;\r\n            height = MAX_HEIGHT;\r\n          }\r\n        }\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        var ctx = canvas.getContext(\"2d\");\r\n\r\n        ctx.drawImage(image, 0, 0, width, height);\r\n\r\n        // IMPORTANT: 'jpeg' NOT 'jpg'\r\n        var dataUrl = canvas.toDataURL(\"image/jpeg\", quality);\r\n\r\n        resolve(dataUrl);\r\n      };\r\n      image.src = img;\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storageRef = firebase.storage().ref();\r\n    const uploadData = async () => {\r\n      // initialize upload information\r\n      setIsError(false);\r\n      setIsLoading(true);\r\n\r\n      setProgress({ value: 0 });\r\n      // ensure unique file names\r\n      let uniquePathName =\r\n        new Date().getTime() +\r\n        \"-\" +\r\n        firebase.auth().currentUser.uid +\r\n        \"-\" +\r\n        fileData.fileName;\r\n\r\n      try {\r\n        let ref = storageRef.child(STORAGE_FILE_PATH + uniquePathName);\r\n        let uploadTask = ref.putString(fileData.dataUrl, \"data_url\", {\r\n          contentType: \"image/\" + fileData.format,\r\n        });\r\n\r\n        \r\n        // The first example.\r\n        uploadTask.on(\r\n          firebase.storage.TaskEvent.STATE_CHANGED,\r\n          _progress => {\r\n            var value = _progress.bytesTransferred / _progress.totalBytes;\r\n            setProgress({ value });\r\n          },\r\n          _error => {\r\n            setIsLoading(false);\r\n            setIsError(_error);\r\n          },\r\n          async _complete => {\r\n            setIsError(false);\r\n            setIsLoading(false);\r\n\r\n            let downloadUrl = await uploadTask.snapshot.ref.getDownloadURL();\r\n            let storageData = {\r\n              //   metaData: uploadTask.snapshot.metadata,\r\n              downloadUrl,\r\n              name: uploadTask.snapshot.metadata.name,\r\n              image: {\r\n                ref: uploadTask.snapshot.ref.fullPath,\r\n                size: uploadTask.snapshot.metadata.size,\r\n                contentType: uploadTask.snapshot.metadata.contentType,\r\n                timeCreated: uploadTask.snapshot.metadata.timeCreated\r\n              }\r\n            };\r\n\r\n            // save to collection\r\n            let docSaved = await onSave(storageData);\r\n\r\n            // get document\r\n            let docData = await docSaved.get();\r\n            setData({\r\n              ...docData.data(),\r\n              id: docData.id\r\n            });\r\n\r\n            setProgress(null);\r\n          }\r\n        );\r\n      } catch (_error) {\r\n        setIsLoading(false);\r\n        setIsError(_error);\r\n      }\r\n    };\r\n\r\n    fileData && uploadData();\r\n  }, [fileData]);\r\n\r\n  /**\r\n   *\r\n   * @param {*} _data\r\n   */\r\n  const onSave = async _data => {\r\n    let thumb = await generateFromImage(fileData.dataUrl);\r\n    let collectionRef = firebase\r\n      .firestore()\r\n      .collection(DOCUMENT_COLLECTION_NAME);\r\n    return await collectionRef.add({\r\n      ..._data,\r\n      thumb,\r\n      createdOn: firebase.firestore.FieldValue.serverTimestamp()\r\n    });\r\n  };\r\n\r\n  return [{ data, isLoading, isError, progress }, setFileData, clearData];\r\n}\r\n\r\nexport default UploadImage;"]},"metadata":{},"sourceType":"module"}