{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\\\u041F\\u0430\\u0432\\u0435\\u043B\\\\Desktop\\\\vkapp\\\\nebuskins\\\\src\\\\App.js\";\nimport React from 'react'; // React\n\nimport connect from '@vkontakte/vkui-connect'; // VK Connect\n\nimport { View, ConfigProvider } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css'; // Импортируем css\n// Импортируем панели\n\nimport NTabbar from './panels/Tabbar';\n\nvar App = /*#__PURE__*/function (_React$Component) {\n  _inherits(App, _React$Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.goBack = function () {\n      // Функция, которая переносит нас на панель назад.\n      var history = _this.state.history;\n\n      if (history.length === 1) {\n        // Если в массиве одно значение:\n        connect.send(\"VKWebAppClose\"); // отправляем connect на закрытие сервиса.\n      } else if (history.length > 1) {\n        // Если в массиве больше одного значения:\n        history.pop(); // удаляем последний элемент в массиве.\n\n        _this.setState({\n          history: history,\n          activePanel: history[history.length - 1]\n        }); // Изменяем массив с иторией и меняем активную панель.\n\n      }\n    };\n\n    _this.state = {\n      activePanel: 'tabbar',\n      // Ставим начальную панель\n      history: ['tabbar'],\n      // Заносим начальную панель в массив историй.\n      scheme: \"bright_light\" // Если не придет тема - ставим эту по умолчанию.\n\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"goToPage\",\n    value: function goToPage(name) {\n      // Функция, которая переносит нас на следущую панель \n      window.history.pushState({\n        panel: name\n      }, name); //  Создаём новую запись в истории браузера\n\n      this.setState({\n        activePanel: name,\n        // Меняем активную панель на second\n        history: [].concat(_toConsumableArray(this.state.history), [name]) // Добавляем панель в историю\n\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      connect.subscribe(function (_ref) {\n        var _ref$detail = _ref.detail,\n            type = _ref$detail.type,\n            data = _ref$detail.data;\n\n        // Подписываемся на события.\n        if (type === 'VKWebAppUpdateConfig') {\n          // Получаем тему клиента.\n          _this2.setState({\n            scheme: data.scheme\n          });\n        }\n      });\n      window.addEventListener('popstate', function () {\n        return _this2.goBack();\n      }); //  Добавляем обработчик события изменения истории для работы аппаратных кнопок.\n    }\n  }, {\n    key: \"UpdateTheme\",\n    value: function UpdateTheme() {\n      if (this.state.scheme === \"bright_light\" || this.state.scheme === \"client_light\") {\n        // Если в стейте эти темы: \n        this.setState({\n          scheme: 'space_gray'\n        }); // меняем тему на альтернативную.\n\n        connect.send(\"VKWebAppSetViewSettings\", {\n          \"status_bar_style\": \"light\",\n          \"action_bar_color\": \"#000\"\n        }); // Устанавливаем цвет статус бара на белый и экшен бара на черный.\n      } else if (this.state.scheme === \"space_gray\" || this.state.scheme === \"client_dark\") {\n        this.setState({\n          scheme: 'bright_light'\n        }); // меняем тему на альтернативную.\n\n        connect.send(\"VKWebAppSetViewSettings\", {\n          \"status_bar_style\": \"dark\",\n          \"action_bar_color\": \"#fff\"\n        }); // Устанавливаем цвет статус бара на черный и экшен бара на белый.\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return (\n        /*#__PURE__*/\n        // scheme - это тема, которую мы ставим в приложением\n        React.createElement(ConfigProvider, {\n          isWebView: true,\n          scheme: this.state.scheme,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(View, {\n          activePanel: this.state.activePanel // Какая панель будет активирована.\n          ,\n          history: this.state.history // Массив с историей.\n          ,\n          onSwipeBack: this.goBack // При свайпе выполнять функцию goBack.\n          ,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }\n        }, /*#__PURE__*/React.createElement(Tabbar, {\n          id: \"tabbar\",\n          this: this,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 17\n          }\n        })))\n      );\n    }\n  }]);\n\n  return App;\n}(React.Component);\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Павел/Desktop/vkapp/nebuskins/src/App.js"],"names":["React","connect","View","ConfigProvider","NTabbar","App","props","goBack","history","state","length","send","pop","setState","activePanel","scheme","name","window","pushState","panel","subscribe","detail","type","data","addEventListener","Component"],"mappings":"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","sourcesContent":["import React from 'react'; // React\r\nimport connect from '@vkontakte/vkui-connect'; // VK Connect\r\nimport {View, ConfigProvider} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css'; // Импортируем css\r\n// Импортируем панели\r\nimport NTabbar from './panels/Tabbar';\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            activePanel: 'tabbar', // Ставим начальную панель\r\n            history: ['tabbar'], // Заносим начальную панель в массив историй.\r\n            scheme: \"bright_light\" // Если не придет тема - ставим эту по умолчанию.\r\n        };\r\n    }\r\n\r\n    goToPage(name) { // Функция, которая переносит нас на следущую панель \r\n        window.history.pushState({panel: name}, name); //  Создаём новую запись в истории браузера\r\n        this.setState({\r\n            activePanel: name,  // Меняем активную панель на second\r\n            history: [...this.state.history, name] // Добавляем панель в историю\r\n        })\r\n    }\r\n\r\n    goBack = () => { // Функция, которая переносит нас на панель назад.\r\n        const history = this.state.history;\r\n        if(history.length === 1) { // Если в массиве одно значение:\r\n            connect.send(\"VKWebAppClose\"); // отправляем connect на закрытие сервиса.\r\n        } else if (history.length > 1) { // Если в массиве больше одного значения:\r\n            history.pop() // удаляем последний элемент в массиве.\r\n            this.setState({history: history, activePanel: history[history.length - 1]}) // Изменяем массив с иторией и меняем активную панель.\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        connect.subscribe(({ detail: { type, data }}) => { // Подписываемся на события.\r\n\t\t\tif (type === 'VKWebAppUpdateConfig') { // Получаем тему клиента.\r\n                this.setState({scheme: data.scheme})\r\n            }\r\n        })\r\n        window.addEventListener('popstate', () => this.goBack()); //  Добавляем обработчик события изменения истории для работы аппаратных кнопок.\r\n    }\r\n\r\n    UpdateTheme() {\r\n        if(this.state.scheme === \"bright_light\" || this.state.scheme === \"client_light\"){ // Если в стейте эти темы: \r\n            this.setState({scheme: 'space_gray'}); // меняем тему на альтернативную.\r\n            connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\", \"action_bar_color\": \"#000\"}); // Устанавливаем цвет статус бара на белый и экшен бара на черный.\r\n\t} else if(this.state.scheme === \"space_gray\" || this.state.scheme === \"client_dark\") {\r\n            this.setState({scheme: 'bright_light'}); // меняем тему на альтернативную.\r\n            connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"dark\", \"action_bar_color\": \"#fff\"}); // Устанавливаем цвет статус бара на черный и экшен бара на белый.\r\n        }\r\n     }\r\n    \r\n    render() {\r\n        return(\r\n            // scheme - это тема, которую мы ставим в приложением\r\n            <ConfigProvider isWebView={true} scheme={this.state.scheme}> \r\n            <View \r\n                activePanel={this.state.activePanel} // Какая панель будет активирована.\r\n                history={this.state.history} // Массив с историей.\r\n                onSwipeBack={this.goBack} // При свайпе выполнять функцию goBack.\r\n            >\r\n                <Tabbar id=\"tabbar\" this={this}/>\r\n            </View>\r\n            </ConfigProvider>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;"]},"metadata":{},"sourceType":"module"}