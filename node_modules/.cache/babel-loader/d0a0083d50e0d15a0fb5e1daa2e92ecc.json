{"ast":null,"code":"import React from 'react';\nimport { View, Card, CardGrid, Panel, PanelHeader, Group, Cell, Switch, Button, Div } from '@vkontakte/vkui';\nimport connect from '@vkontakte/vkui-connect'; // VK Connect\n\nimport { ConfigProvider } from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css'; // Импортируем css\n// class Settings extends React.Component {\n//     constructor(props) {\n//         super(props);\n//         this.state = {\n//             activePanel: 'settings', // Ставим начальную панель\n//             history: ['settings'], // Заносим начальную панель в массив историй.\n//             scheme: \"bright_light\" // Если не придет тема - ставим эту по умолчанию.\n//         };\n//     }\n//     componentDidMount() {\n//         connect.subscribe(({ detail: { type, data }}) => { // Подписываемся на события.\n// \t\t\tif (type === 'VKWebAppUpdateConfig') { // Получаем тему клиента.\n//                 this.setState({scheme: data.scheme})\n//             }\n//         })\n//     }\n//     UpdateTheme() {\n//         if(this.state.scheme === \"bright_light\" || this.state.scheme === \"client_light\"){ // Если в стейте эти темы: \n//             this.setState({scheme: 'space_gray'}); // меняем тему на альтернативную.\n//             connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\", \"action_bar_color\": \"#000\"}); // Устанавливаем цвет статус бара на белый и экшен бара на черный.\n// \t} else if(this.state.scheme === \"space_gray\" || this.state.scheme === \"client_dark\") {\n//             this.setState({scheme: 'bright_light'}); // меняем тему на альтернативную.\n//             connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"dark\", \"action_bar_color\": \"#fff\"}); // Устанавливаем цвет статус бара на черный и экшен бара на белый.\n//         }\n//      }\n//     render() {\n//         return(\n//             // scheme - это тема, которую мы ставим в приложением\n//             <ConfigProvider isWebView={true} scheme={this.state.scheme}> \n//             <Div>\n//             <Cell asideContent={<Switch />} onClick={() => this.UpdateTheme()}>\n//           Темная тема\n//         </Cell>\n//         <Button onClick={() => this.UpdateTheme()} size=\"xl\" mode=\"secondary\">Сменить тему на альтернативную</Button>\n//         </Div>\n//             </ConfigProvider>\n//         );\n//     }\n// }\n\nexport default Settings;","map":{"version":3,"sources":["C:/Users/Павел/Desktop/vkapp/nebuskins/src/panels/Settings.js"],"names":["React","View","Card","CardGrid","Panel","PanelHeader","Group","Cell","Switch","Button","Div","connect","ConfigProvider","Settings"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,IAAf,EAAqBC,QAArB,EAA+BC,KAA/B,EAAsCC,WAAtC,EAAmDC,KAAnD,EAA0DC,IAA1D,EAAgEC,MAAhE,EAAwEC,MAAxE,EAAgFC,GAAhF,QAA2F,iBAA3F;AACA,OAAOC,OAAP,MAAoB,yBAApB,C,CAA+C;;AAC/C,SAAQC,cAAR,QAA6B,iBAA7B;AACA,OAAO,+BAAP,C,CAAwC;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,QAAf","sourcesContent":["import React from 'react';\r\nimport { View, Card, CardGrid, Panel, PanelHeader, Group, Cell, Switch, Button, Div } from '@vkontakte/vkui';\r\nimport connect from '@vkontakte/vkui-connect'; // VK Connect\r\nimport {ConfigProvider} from '@vkontakte/vkui';\r\nimport '@vkontakte/vkui/dist/vkui.css'; // Импортируем css\r\n\r\n// class Settings extends React.Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             activePanel: 'settings', // Ставим начальную панель\r\n//             history: ['settings'], // Заносим начальную панель в массив историй.\r\n//             scheme: \"bright_light\" // Если не придет тема - ставим эту по умолчанию.\r\n//         };\r\n//     }\r\n\r\n//     componentDidMount() {\r\n//         connect.subscribe(({ detail: { type, data }}) => { // Подписываемся на события.\r\n// \t\t\tif (type === 'VKWebAppUpdateConfig') { // Получаем тему клиента.\r\n//                 this.setState({scheme: data.scheme})\r\n//             }\r\n//         })\r\n//     }\r\n\r\n//     UpdateTheme() {\r\n//         if(this.state.scheme === \"bright_light\" || this.state.scheme === \"client_light\"){ // Если в стейте эти темы: \r\n//             this.setState({scheme: 'space_gray'}); // меняем тему на альтернативную.\r\n//             connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"light\", \"action_bar_color\": \"#000\"}); // Устанавливаем цвет статус бара на белый и экшен бара на черный.\r\n// \t} else if(this.state.scheme === \"space_gray\" || this.state.scheme === \"client_dark\") {\r\n//             this.setState({scheme: 'bright_light'}); // меняем тему на альтернативную.\r\n//             connect.send(\"VKWebAppSetViewSettings\", {\"status_bar_style\": \"dark\", \"action_bar_color\": \"#fff\"}); // Устанавливаем цвет статус бара на черный и экшен бара на белый.\r\n//         }\r\n//      }\r\n    \r\n//     render() {\r\n//         return(\r\n//             // scheme - это тема, которую мы ставим в приложением\r\n//             <ConfigProvider isWebView={true} scheme={this.state.scheme}> \r\n//             <Div>\r\n//             <Cell asideContent={<Switch />} onClick={() => this.UpdateTheme()}>\r\n//           Темная тема\r\n//         </Cell>\r\n//         <Button onClick={() => this.UpdateTheme()} size=\"xl\" mode=\"secondary\">Сменить тему на альтернативную</Button>\r\n//         </Div>\r\n//             </ConfigProvider>\r\n//         );\r\n//     }\r\n// }\r\nexport default Settings;"]},"metadata":{},"sourceType":"module"}