(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.mVKMiniAppsScrollHelper = factory());
}(this, function () { 'use strict';

  var PLATFORM_PARAM = 'vk_platform';
  var MOBILE_WEB = 'mobile_web';
  /**
   * @returns {array|false}
   */

  var iOSVersion = function iOSVersion() {
    var match = navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/);
    var version = null;

    if (match !== undefined && match !== null) {
      version = [parseInt(match[1], 10), parseInt(match[2], 10), parseInt(match[3] || 0, 10)];
      return version;
    }

    return false;
  };
  /**
   * @param {HTMLElement|null} appContainerNode
   */


  var mvkScrollHelper = function mvkScrollHelper(appContainerNode) {
    if (appContainerNode == null) {
      return;
    }

    var isMobileWeb = location.search.indexOf("".concat(PLATFORM_PARAM, "=").concat(MOBILE_WEB)) > -1;
    var _navigator = navigator,
        userAgent = _navigator.userAgent;
    var version = iOSVersion();

    if ((userAgent.indexOf('iPhone') > -1 || userAgent.indexOf('iPad') > -1) && isMobileWeb && version && version[0] < 13) {
      appContainerNode.style.overflowY = 'scroll';
      appContainerNode.style.webkitOverflowScrolling = 'touch';
      document.documentElement.style.maxWidth = '100vw';
      document.body.style.maxWidth = '100vw';
      appContainerNode.style.maxWidth = '100vw';
    }
  };

  return mvkScrollHelper;

}));
