{"version":3,"sources":["../../../src/components/Panel/Panel.tsx"],"names":["Panel","container","getRootRef","props","current","panel","id","className","centered","children","insets","platform","separator","restProps","tabbarPadding","context","hasTabbar","tabbarHeight","getRef","paddingBottom","bottom","Component","PropTypes","string","bool"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;IAiBMA,K;;;;;;;;;;;;;;;;yFAuB6B,UAACC,SAAD,EAA+B;AAC9D,YAAKA,SAAL,GAAiBA,SAAjB;AAEA,UAAMC,UAAU,GAAG,MAAKC,KAAL,CAAWD,UAA9B;;AACA,UAAIA,UAAJ,EAAgB;AACd,YAAI,OAAOA,UAAP,KAAsB,UAA1B,EAAsC;AACpCA,UAAAA,UAAU,CAACD,SAAD,CAAV;AACD,SAFD,MAEO;AACLC,UAAAA,UAAU,CAACE,OAAX,GAAqBH,SAArB;AACD;AACF;AACF,K;;;;;;sCAnBiB;AAChB,aAAO;AACLI,QAAAA,KAAK,EAAE,KAAKF,KAAL,CAAWG;AADb,OAAP;AAGD;;;6BAiBQ;AAAA,wBAC0F,KAAKH,KAD/F;AAAA,UACCI,SADD,eACCA,SADD;AAAA,UACYC,QADZ,eACYA,QADZ;AAAA,UACsBC,QADtB,eACsBA,QADtB;AAAA,UACgCC,MADhC,eACgCA,MADhC;AAAA,UACwCC,QADxC,eACwCA,QADxC;AAAA,UACkDC,SADlD,eACkDA,SADlD;AAAA,UAC6DV,UAD7D,eAC6DA,UAD7D;AAAA,UAC4EW,SAD5E;AAEP,UAAMC,aAAa,GAAG,KAAKC,OAAL,CAAaC,SAAb,GAAyBC,uBAAzB,GAAwC,CAA9D;AAEA,0BACE,+DACMJ,SADN;AAEE,QAAA,GAAG,EAAE,KAAKK,MAFZ;AAGE,QAAA,SAAS,EAAE,yBAAW,2BAAa,OAAb,EAAsBP,QAAtB,CAAX,EAA4CJ,SAA5C,EAAuD;AAChE,6BAAmBC;AAD6C,SAAvD;AAHb,uBAOE,6BAAC,cAAD;AAAO,QAAA,SAAS,EAAC,WAAjB;AAA6B,QAAA,KAAK,EAAE;AAClCW,UAAAA,aAAa,EAAE,sBAAUT,MAAM,CAACU,MAAjB,IAA2BV,MAAM,CAACU,MAAP,GAAgBN,aAA3C,GAA2D;AADxC;AAApC,sBAGE;AAAK,QAAA,SAAS,EAAC;AAAf,QAHF,EAIGF,SAAS,iBAAI,6BAAC,kBAAD;AAAW,QAAA,SAAS,EAAC;AAArB,QAJhB,EAKGJ,QAAQ,gBAAG;AAAK,QAAA,SAAS,EAAC;AAAf,SAAkCC,QAAlC,CAAH,GAAuDA,QALlE,eAME;AAAK,QAAA,SAAS,EAAC;AAAf,QANF,CAPF,CADF;AAkBD;;;EA1DiBY,gB;;8BAAdrB,K,uBAC0C;AAC5CK,EAAAA,KAAK,EAAEiB,mBAAUC;AAD2B,C;8BAD1CvB,K,kBAKuC;AACzCS,EAAAA,QAAQ,EAAE,EAD+B;AAEzCD,EAAAA,QAAQ,EAAE,KAF+B;AAGzCI,EAAAA,SAAS,EAAE;AAH8B,C;8BALvCZ,K,kBAWgC;AAClCgB,EAAAA,SAAS,EAAEM,mBAAUE;AADa,C;;eAkDvB,2BAAa,yBAAWxB,KAAX,CAAb,C","sourcesContent":["import React, { Component, HTMLAttributes } from 'react';\nimport PropTypes, { Requireable } from 'prop-types';\nimport getClassName from '../../helpers/getClassName';\nimport classNames from '../../lib/classNames';\nimport Touch from '../Touch/Touch';\nimport { tabbarHeight } from '../../appearance/constants';\nimport withInsets from '../../hoc/withInsets';\nimport withPlatform from '../../hoc/withPlatform';\nimport { isNumeric } from '../../lib/utils';\nimport Separator from '../Separator/Separator';\nimport { HasInsets, HasPlatform, HasRootRef, OldRef } from '../../types';\n\nexport interface PanelProps extends HTMLAttributes<HTMLDivElement>, HasPlatform, HasInsets, HasRootRef<HTMLDivElement> {\n  id: string;\n  separator?: boolean;\n  centered?: boolean;\n}\n\nexport interface PanelChildContext {\n  panel: Requireable<string>;\n}\n\nexport interface PanelContext {\n  hasTabbar: Requireable<boolean>;\n}\n\nclass Panel extends Component<PanelProps> {\n  static childContextTypes: PanelChildContext = {\n    panel: PropTypes.string,\n  };\n\n  static defaultProps: Partial<PanelProps> = {\n    children: '',\n    centered: false,\n    separator: true,\n  };\n\n  static contextTypes: PanelContext = {\n    hasTabbar: PropTypes.bool,\n  };\n\n  getChildContext() {\n    return {\n      panel: this.props.id,\n    };\n  }\n\n  container: HTMLDivElement;\n\n  getRef: OldRef<HTMLDivElement> = (container: HTMLDivElement) => {\n    this.container = container;\n\n    const getRootRef = this.props.getRootRef;\n    if (getRootRef) {\n      if (typeof getRootRef === 'function') {\n        getRootRef(container);\n      } else {\n        getRootRef.current = container;\n      }\n    }\n  };\n\n  render() {\n    const { className, centered, children, insets, platform, separator, getRootRef, ...restProps } = this.props;\n    const tabbarPadding = this.context.hasTabbar ? tabbarHeight : 0;\n\n    return (\n      <div\n        {...restProps}\n        ref={this.getRef}\n        className={classNames(getClassName('Panel', platform), className, {\n          'Panel--centered': centered,\n        })}\n      >\n        <Touch className=\"Panel__in\" style={{\n          paddingBottom: isNumeric(insets.bottom) ? insets.bottom + tabbarPadding : null,\n        }}>\n          <div className=\"Panel__in-before\" />\n          {separator && <Separator className=\"Panel__separator\" />}\n          {centered ? <div className=\"Panel__centered\">{children}</div> : children}\n          <div className=\"Panel__in-after\" />\n        </Touch>\n      </div>\n    );\n  }\n}\n\nexport default withPlatform(withInsets(Panel));\n"],"file":"Panel.js"}