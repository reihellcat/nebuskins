{"version":3,"sources":["../../../src/components/ConfigProvider/ConfigProvider.tsx"],"names":["ConfigProvider","props","canUseDOM","setScheme","scheme","Scheme","DEPRECATED_CLIENT_LIGHT","BRIGHT_LIGHT","DEPRECATED_CLIENT_DARK","SPACE_GRAY","document","body","setAttribute","prevProps","mapOldScheme","isWebView","webviewType","appearance","app","getChildContext","children","React","Component","WebviewType","VKAPPS","vkBridge","Appearance","LIGHT","PropTypes","bool","oneOf","INTERNAL","DARK","string"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAQA;;;;;;IAYqBA,c;;;;;AACnB,0BAAYC,KAAZ,EAAwC;AAAA;;AAAA;AACtC,8BAAMA,KAAN;;AACA,QAAIC,cAAJ,EAAe;AACb,YAAKC,SAAL,CAAeF,KAAK,CAACG,MAArB;AACD;;AAJqC;AAKvC;;;;iCAsBYA,M,EAAoD;AAC/D,cAAQA,MAAR;AACE,aAAKC,8BAAOC,uBAAZ;AACE,iBAAOD,8BAAOE,YAAd;;AACF,aAAKF,8BAAOG,sBAAZ;AACE,iBAAOH,8BAAOI,UAAd;;AACF;AACE,iBAAOL,MAAP;AANJ;AAQD;;;8BAESA,M,EAAoC;AAC5CM,MAAAA,QAAQ,CAACC,IAAT,CAAcC,YAAd,CAA2B,QAA3B,EAAqCR,MAArC;AACD;;;uCAEkBS,S,EAAgC;AACjD,UAAIA,SAAS,CAACT,MAAV,KAAqB,KAAKH,KAAL,CAAWG,MAApC,EAA4C;AAC1C,aAAKD,SAAL,CAAe,KAAKW,YAAL,CAAkB,KAAKb,KAAL,CAAWG,MAA7B,CAAf;AACD;AACF;;;sCAEsC;AACrC,aAAO;AACLW,QAAAA,SAAS,EAAE,KAAKd,KAAL,CAAWc,SADjB;AAELC,QAAAA,WAAW,EAAE,KAAKf,KAAL,CAAWe,WAFnB;AAGLZ,QAAAA,MAAM,EAAE,KAAKU,YAAL,CAAkB,KAAKb,KAAL,CAAWG,MAA7B,CAHH;AAILa,QAAAA,UAAU,EAAE,KAAKhB,KAAL,CAAWgB,UAJlB;AAKLC,QAAAA,GAAG,EAAE,KAAKjB,KAAL,CAAWiB;AALX,OAAP;AAOD;;;6BAEQ;AACP,0BACE,6BAAC,4CAAD,CAAuB,QAAvB;AAAgC,QAAA,KAAK,EAAE,KAAKC,eAAL;AAAvC,SACG,KAAKlB,KAAL,CAAWmB,QADd,CADF;AAKD;;;EAjEyCC,eAAMC,S;;;8BAA7BtB,c,kBAQwB;AACzCgB,EAAAA,WAAW,EAAEO,mCAAYC,MADgB;AAEzCT,EAAAA,SAAS,EAAEU,kBAASV,SAAT,EAF8B;AAGzCX,EAAAA,MAAM,EAAEC,8BAAOE,YAH0B;AAIzCU,EAAAA,UAAU,EAAES,kCAAWC;AAJkB,C;8BARxB3B,c,uBAewC;AACzDe,EAAAA,SAAS,EAAEa,mBAAUC,IADoC;AAEzDzB,EAAAA,MAAM,EAAEwB,mBAAUE,KAAV,CAAgB,CACtBzB,8BAAOI,UADe,EAEtBJ,8BAAOE,YAFe,EAGtBF,8BAAOG,sBAHe,EAItBH,8BAAOC,uBAJe,CAAhB,CAFiD;AAQzDU,EAAAA,WAAW,EAAEY,mBAAUE,KAAV,CAAgB,CAACP,mCAAYC,MAAb,EAAqBD,mCAAYQ,QAAjC,CAAhB,CAR4C;AASzDd,EAAAA,UAAU,EAAEW,mBAAUE,KAAV,CAAgB,CAACJ,kCAAWM,IAAZ,EAAkBN,kCAAWC,KAA7B,CAAhB,CAT6C;AAUzDT,EAAAA,GAAG,EAAEU,mBAAUK;AAV0C,C","sourcesContent":["import React from 'react';\nimport { canUseDOM } from '../../lib/dom';\nimport PropTypes, { Validator } from 'prop-types';\nimport {\n  Appearance,\n  ConfigProviderContext,\n  ConfigProviderContextInterface,\n  Scheme,\n  WebviewType,\n} from './ConfigProviderContext';\nimport { HasChildren } from '../../types';\nimport vkBridge, { AppearanceSchemeType } from '@vkontakte/vk-bridge';\n\nexport interface ConfigProviderProps extends ConfigProviderContextInterface, HasChildren {}\n\nexport interface ConfigProviderChildContextType {\n  isWebView: Validator<boolean>;\n  scheme: Validator<Scheme>;\n  webviewType: Validator<WebviewType>;\n  appearance: Validator<Appearance>;\n  app: Validator<string>;\n}\n\nexport default class ConfigProvider extends React.Component<ConfigProviderProps> {\n  constructor(props: ConfigProviderProps) {\n    super(props);\n    if (canUseDOM) {\n      this.setScheme(props.scheme);\n    }\n  }\n\n  static defaultProps: ConfigProviderProps = {\n    webviewType: WebviewType.VKAPPS,\n    isWebView: vkBridge.isWebView(),\n    scheme: Scheme.BRIGHT_LIGHT,\n    appearance: Appearance.LIGHT,\n  };\n\n  static childContextTypes: ConfigProviderChildContextType = {\n    isWebView: PropTypes.bool,\n    scheme: PropTypes.oneOf([\n      Scheme.SPACE_GRAY,\n      Scheme.BRIGHT_LIGHT,\n      Scheme.DEPRECATED_CLIENT_DARK,\n      Scheme.DEPRECATED_CLIENT_LIGHT,\n    ]),\n    webviewType: PropTypes.oneOf([WebviewType.VKAPPS, WebviewType.INTERNAL]),\n    appearance: PropTypes.oneOf([Appearance.DARK, Appearance.LIGHT]),\n    app: PropTypes.string,\n  };\n\n  mapOldScheme(scheme: AppearanceSchemeType): AppearanceSchemeType {\n    switch (scheme) {\n      case Scheme.DEPRECATED_CLIENT_LIGHT:\n        return Scheme.BRIGHT_LIGHT;\n      case Scheme.DEPRECATED_CLIENT_DARK:\n        return Scheme.SPACE_GRAY;\n      default:\n        return scheme;\n    }\n  }\n\n  setScheme(scheme: AppearanceSchemeType): void {\n    document.body.setAttribute('scheme', scheme);\n  }\n\n  componentDidUpdate(prevProps: ConfigProviderProps) {\n    if (prevProps.scheme !== this.props.scheme) {\n      this.setScheme(this.mapOldScheme(this.props.scheme));\n    }\n  }\n\n  getChildContext(): ConfigProviderProps {\n    return {\n      isWebView: this.props.isWebView,\n      webviewType: this.props.webviewType,\n      scheme: this.mapOldScheme(this.props.scheme),\n      appearance: this.props.appearance,\n      app: this.props.app,\n    };\n  }\n\n  render() {\n    return (\n      <ConfigProviderContext.Provider value={this.getChildContext()}>\n        {this.props.children}\n      </ConfigProviderContext.Provider>\n    );\n  }\n}\n"],"file":"ConfigProvider.js"}